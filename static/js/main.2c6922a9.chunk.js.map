{"version":3,"sources":["constants/theme.ts","constants/locale.ts","constants/localStorageKey.ts","store/ui.ts","store/index.ts","themes/dark.ts","themes/white.ts","components/Demo.tsx","containers/Demo.tsx","components/Home.tsx","containers/Home.tsx","components/Sidebar.tsx","containers/Sidebar.tsx","components/RadioInput.tsx","constants/route.tsx","components/StyledSwitch.tsx","components/CircleBox.ts","components/Header.tsx","containers/Header.tsx","layouts/BasicLayout.tsx","App.tsx","reportWebVitals.ts","utils/i18n.ts","index.tsx"],"names":["ThemeEnum","Locale","LocalStorageKey","UIStore","theme","locale","sidebarCollapse","makeAutoObservable","this","localStorage","getItem","Theme","Dark","EN","UIContext","createContext","DarkTheme","palette","primary","main","blue","light","dark","contrastText","secondary","text","background","default","dimension","header","sidebar","WhiteTheme","Demo","props","DemoContainer","memo","Home","HomeContainer","StyledItemButton","withStyles","selected","backgroundColor","color","alignContent","display","ListItemButton","RouteItem","name","collapse","icon","onClick","ListItemIcon","sx","width","minWidth","ListItemText","margin","marginTop","Sidebar","location","history","t","routes","useMemo","Object","values","Routes","map","route","index","pathname","RouteKeyMap","path","e","push","List","component","aria-label","disablePadding","dense","bgcolor","flexGrow","observer","useLocation","useHistory","useTranslation","uiStore","useContext","getSidebarCollapse","RowFormControl","styled","FormControl","flexDirection","marginHorizontal","VCenterLabel","root","alignSelf","marginRight","Typography","RadioInput","onChange","options","value","title","memoOptions","option","FormControlLabel","control","Radio","checked","label","translation","RadioGroup","row","switchBase","height","paddingTop","withTheme","Switch","Box","borderRadius","alignItems","justifyContent","zIndex","StyledAppbar","AppBar","minHeight","StyledToolbar","Toolbar","WhiteThemeIcon","WbSunnyIcon","Header","handleLocaleChange","handleThemeChange","handleCollapseBtnClick","themeSwitchRef","useRef","position","IconButton","transformOrigin","transform","Grid","direction","container","item","xs","Stack","spacing","White","StyledSwitch","inputRef","checkedIcon","CircleBox","current","click","i18n","useCallback","changeLanguage","target","setItem","setLocale","setTheme","setSidebarCollapse","getLocale","getTheme","Background","BasicLayout","renderRoutes","lineHeight","routeConfig","exact","key","responsiveFontSizes","createTheme","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","ns","defaultNS","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","Provider","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.2c6922a9.chunk.js","sourcesContent":["enum ThemeEnum {\n    Dark = 'dark',\n    White = 'white',\n}\n\nexport default ThemeEnum;\n","enum Locale {\n    EN = \"en-US\",\n    ZH = \"zh-HK\"\n}\nexport default Locale;","enum LocalStorageKey {\n    Theme = 'theme',\n    Locale = 'locale'\n}\nexport default LocalStorageKey","import { makeAutoObservable } from 'mobx';\nimport Locale from '../constants/locale';\nimport LocalStorageKey from '../constants/localStorageKey';\nimport Theme from '../constants/theme';\n\nexport default class UIStore {\n    theme: Theme;\n    locale: Locale;\n    sidebarCollapse: boolean;\n\n    constructor() {\n        makeAutoObservable(this);\n        const theme = localStorage.getItem(LocalStorageKey.Theme);\n        const locale = localStorage.getItem(LocalStorageKey.Locale);\n        this.theme = (theme ? theme : Theme.Dark) as Theme;\n        this.locale = (locale ? locale : Locale.EN) as Locale;\n        this.sidebarCollapse = false;\n    }\n    get getTheme(): Theme {\n        return this.theme;\n    }\n    get getLocale(): Locale {\n        return this.locale;\n    }\n    get getSidebarCollapse(): boolean {\n        return this.sidebarCollapse\n    }\n\n    setTheme(theme: Theme): void {\n        this.theme = theme;\n    }\n    setLocale(locale: Locale): void {\n        this.locale = locale;\n    }\n    setSidebarCollapse(sidebarCollapse: boolean): void {\n        this.sidebarCollapse = sidebarCollapse\n    }\n}\n","import { createContext } from \"react\";\nimport UIStore from \"./ui\";\n\nexport const UIContext = createContext<UIStore>(new UIStore())","import { blue } from '@mui/material/colors';\nimport { CustomTheme } from './type';\n\nconst DarkTheme: CustomTheme = {\n    palette: {\n        primary: {\n            main: blue[400],\n            light: blue[300],\n            dark: blue[800],\n            contrastText: '#ffffff'\n        },\n        secondary: {\n            main: '#fdf100',\n            light: '#f9f395',\n            dark: '#ded502',\n            contrastText: '#000000'\n        },\n        text: {\n            primary: '#ffffff',\n            secondary: '#161616',\n        },\n        background: {\n            default: '#161616',\n        },\n    },\n    dimension: {\n        header: '3rem',\n        sidebar: '10rem',\n    },\n};\nexport default DarkTheme;\n","import { CustomTheme } from './type';\n\nconst WhiteTheme: CustomTheme = {\n    palette: {\n        primary: {\n            main: '#3fb550',\n            light: '#8ff1a4',\n            dark: '#3ab14c',\n            contrastText: '#ffffff'\n        },\n        secondary: {\n            main: '#0024fd',\n            light: '#7a82f3',\n            dark: '#0a22b3',\n            contrastText: '#ffffff'\n        },\n        text: {\n            primary: '#161616',\n            secondary: '#e0dede',\n        },\n        background: {\n            default: '#e0dede',\n        },\n    },\n    dimension: {\n        header: '3rem',\n        sidebar: '10rem',\n    },\n};\nexport default WhiteTheme;\n","import React from 'react';\n\ninterface DemoProps {}\nconst Demo = (props: DemoProps) => {\n    return <div></div>;\n};\nexport default Demo;\n","import React, { memo } from 'react';\nimport Demo from 'src/components/Demo';\ninterface DemoProps {}\nconst DemoContainer = (props: DemoProps) => {\n    return <Demo />;\n};\nexport default memo(DemoContainer);\n","import React from 'react';\nimport { RouteProps } from 'react-router-dom';\n\ninterface HomeProps extends RouteProps {}\nconst Home = (props: HomeProps) => {\n    return <div>Home</div>;\n};\nHome.propTypes = {};\nexport default Home;\n","import React,{ memo } from \"react\";\nimport { RouteProps } from \"react-router-dom\";\nimport Home from \"../components/Home\";\n\nconst HomeContainer = (props: RouteProps) => {\n    return <Home/>\n}\nexport default memo(HomeContainer)","import {\n    Box,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Theme,\n} from '@mui/material';\nimport { Location } from 'history';\nimport React, { MouseEvent, useMemo } from 'react';\nimport { TFunction } from 'react-i18next';\nimport { RouteKeyMap, Routes } from 'src/constants/route';\nimport { withStyles } from '@mui/styles';\n\nconst StyledItemButton = withStyles((theme: Theme) => ({\n    selected: {\n        backgroundColor: `${theme.palette.primary.light} !important`,\n        color: `${theme.palette.secondary.contrastText} !important`,\n        alignContent: 'center',\n        display: 'flex',\n    },\n}))(ListItemButton);\ninterface RouteItemProps {\n    onClick: (e: MouseEvent<HTMLDivElement>) => void;\n    selected: boolean;\n    name: string;\n    collapse: boolean;\n    icon: (props: { selected: boolean }) => JSX.Element;\n}\nconst RouteItem = ({\n    selected,\n    name,\n    collapse,\n    icon,\n    onClick,\n}: RouteItemProps) => {\n    return (\n        <StyledItemButton selected={selected} onClick={onClick}>\n            <ListItemIcon\n                sx={{\n                    width: 'fit-content',\n                    minWidth: 0,\n                }}\n            >\n                {icon({ selected })}\n            </ListItemIcon>\n            {!collapse && <ListItemText primary={name}  sx={{\n                margin: '0 0.5rem',\n                marginTop: '0.2rem'\n            }}/>}\n        </StyledItemButton>\n    );\n};\ninterface SidebarProps {\n    location: Location;\n    history: any;\n    collapse: boolean;\n    t: TFunction<('general' | 'route')[], undefined>;\n}\nconst Sidebar = ({ location, history, collapse, t }: SidebarProps) => {\n    const routes = useMemo(\n        () =>\n            Object.values(Routes).map((route, index) => {\n                return (\n                    <RouteItem\n                        selected={location.pathname === RouteKeyMap[route].path}\n                        name={t<string>(`routes:${route}`)}\n                        onClick={(e) => {\n                            history.push(RouteKeyMap[route].path);\n                        }}\n                        key={`${route}-${index}`}\n                        icon={RouteKeyMap[route].icon}\n                        collapse={collapse}\n                    />\n                );\n            }),\n        [t, location, history, collapse]\n    );\n    return (\n        <List\n            component='nav'\n            aria-label='routes'\n            disablePadding\n            dense\n            sx={{\n                bgcolor: '#404040',\n                flexGrow: 1,\n            }}\n        >\n            {routes}\n        </List>\n    );\n};\nexport default Sidebar;\n","import { observer } from 'mobx-react';\nimport React, { memo, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { UIContext } from 'src/store';\nimport UIStore from 'src/store/ui';\nimport Sidebar from '../components/Sidebar';\n\nconst SidebarContainer = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const { t } = useTranslation(['general', 'routes']);\n    const uiStore = useContext<UIStore>(UIContext);\n    return <Sidebar location={location} history={history} t={t} collapse={uiStore.getSidebarCollapse}/>;\n};\nexport default observer(SidebarContainer);\n","import React, { ChangeEvent, useMemo } from 'react';\nimport {\n    FormControl,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    Typography,\n    TypographyProps,\n} from '@mui/material';\nimport { styled, Theme } from '@mui/system';\nimport { Styles, withStyles } from '@mui/styles';\n\nconst RowFormControl = styled(FormControl)(({ theme }) => ({\n    flexDirection: 'row',\n    marginHorizontal: '1rem',\n}));\nconst VCenterLabel = withStyles<Styles<Theme, TypographyProps>>(theme=>({\n    root: {\n        alignSelf: 'center',\n        marginRight: '1rem !important',\n        color: theme.palette.text.primary\n\n    }\n}))(Typography);\n\ninterface RadioInputProps<OptionType> {\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    title: string;\n    options: Array<{\n        value: OptionType;\n        translation: string;\n    }>;\n    value: OptionType;\n}\n\nexport default function RadioInput<OptionType>({\n    onChange,\n    options,\n    value,\n    title,\n}: RadioInputProps<OptionType>) {\n    const memoOptions = useMemo(\n        () =>\n            options.map((option, index) => (\n                <FormControlLabel\n                    value={option.value}\n                    control={\n                        <Radio\n                            color='secondary'\n                            checked={value === option.value}\n                        />\n                    }\n                    label={option.translation}\n                    key={`${value}-${index}`}\n                />\n            )),\n        [value, options]\n    );\n    return (\n        <RowFormControl>\n            <VCenterLabel>{title}</VCenterLabel>\n            <RadioGroup row aria-label={title} onChange={onChange}>\n                {memoOptions}\n            </RadioGroup>\n        </RowFormControl>\n    );\n}\n","import React from 'react';\nimport { RouteConfig } from 'react-router-config';\nimport Demo from 'src/containers/Demo';\nimport Home from 'src/containers/Home';\nimport BasicLayout from 'src/layouts/BasicLayout';\nimport HomeIcon from '@mui/icons-material/Home';\nimport SlideshowIcon from '@mui/icons-material/Slideshow';\n\nexport enum Routes {\n    Home = 'home',\n    Demo = 'demo',\n}\nexport const RouteKeyMap = {\n    [Routes.Home]: {\n        path: '/',\n        icon: ({ selected }: { selected: boolean }) => (\n            <HomeIcon\n                sx={{\n                    color: selected ? 'text.primary' : 'primary.contrastText',\n                    lineHeight: 1.43,\n                }}\n            />\n        ),\n    },\n    [Routes.Demo]: {\n        path: '/demo',\n        icon: ({ selected }: { selected: boolean }) => (\n            <SlideshowIcon\n                sx={{\n                    color: selected ? 'text.primary' : 'primary.contrastText',\n                    lineHeight: 1.43,\n                }}\n            />\n        ),\n    },\n};\nconst routeConfig: Array<RouteConfig> = [\n    {\n        component: BasicLayout,\n        routes: [\n            {\n                path: RouteKeyMap[Routes.Home].path,\n                exact: true,\n                key: Routes.Home,\n                component: Home,\n            },\n            {\n                path: RouteKeyMap[Routes.Demo].path,\n                exact: true,\n                key: Routes.Demo,\n                component: Demo,\n            },\n        ],\n    },\n];\nexport default routeConfig;\n","import { Switch, SwitchProps } from '@mui/material';\nimport { Styles, withStyles } from '@mui/styles';\nimport { Theme } from '@mui/system';\n\nexport default withStyles<Styles<Theme, SwitchProps>>(\n    (theme) => ({\n        root: {\n            width: '4rem !important',\n        },\n        switchBase: {\n            height: '3rem',\n            paddingTop: '0 !important',\n            // transform: 'translateX(6px)',\n        },\n    }),\n    {\n        withTheme: true,\n    }\n)(Switch);\n","import { Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport default styled(Box)(({ theme }) => ({\n    width: '2rem',\n    height: '2rem',\n    borderRadius: '2rem',\n    background: theme.palette.primary.contrastText,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n}));\n","import React, { ChangeEvent, useRef, MouseEvent } from 'react';\nimport {\n    AppBar,\n    Grid,\n    IconButton,\n    Stack,\n    Toolbar,\n    ToolbarProps,\n    Typography,\n} from '@mui/material';\nimport { styled, Styles, withStyles } from '@mui/styles';\nimport { TFunction } from 'react-i18next';\nimport { Theme } from '@mui/system';\nimport HomeIcon from '@mui/icons-material/Home';\nimport Brightness3Icon from '@mui/icons-material/Brightness3';\nimport WbSunnyIcon from '@mui/icons-material/WbSunny';\nimport Locale from '../constants/locale';\nimport ThemeEnum from '../constants/theme';\nimport RadioInput from './RadioInput';\nimport StyledSwitch from './StyledSwitch';\nimport CircleBox from './CircleBox';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\n\nconst StyledAppbar = styled(AppBar)(({ theme }) => {\n    return {\n        minHeight: theme.dimension.header,\n        height: theme.dimension.header,\n    };\n});\nconst StyledToolbar = withStyles<Styles<Theme, ToolbarProps>>(\n    (theme: Theme) => ({\n        root: {\n            minHeight: `${theme.dimension.header} !important`,\n            height: theme.dimension.header,\n            display: 'flex',\n            justifyContent: 'space-between',\n        },\n    })\n)(Toolbar);\nconst WhiteThemeIcon = styled(WbSunnyIcon)(({ theme }) => ({\n    color: theme.palette.secondary.main,\n}));\n\ninterface HeaderProps {\n    locale: Locale;\n    theme: ThemeEnum;\n    sidebarCollapse: boolean;\n    t: TFunction;\n    handleLocaleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleThemeChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleCollapseBtnClick: (e: MouseEvent<HTMLButtonElement>) => void;\n}\nconst Header = ({\n    t,\n    locale,\n    theme,\n    sidebarCollapse,\n    handleLocaleChange,\n    handleThemeChange,\n    handleCollapseBtnClick,\n}: HeaderProps) => {\n    const themeSwitchRef = useRef<HTMLInputElement>(null);\n    return (\n        <StyledAppbar position='static'>\n            <StyledToolbar>\n                <IconButton onClick={handleCollapseBtnClick}>\n                    <ExpandLessIcon\n                        sx={{\n                            transformOrigin: 'center',\n                            transform: sidebarCollapse ? 'rotate(90deg)' : 'rotate(-90deg)',\n                            color: 'text.primary',\n                        }}\n                    />\n                </IconButton>\n                <Grid\n                    direction='row'\n                    container\n                    item\n                    xs={9}\n                    justifyContent={'flex-end'}\n                >\n                    <RadioInput<Locale>\n                        onChange={handleLocaleChange}\n                        title={t<string>('general:locale')}\n                        options={Object.values(Locale).map((option) => ({\n                            value: option,\n                            translation: t<string>(`general:${option}`),\n                        }))}\n                        value={locale}\n                    />\n                    <Stack direction={'row'} spacing={1} alignItems={'center'}>\n                        <Typography>\n                            {t<string>(`general:${ThemeEnum.White}`)}\n                        </Typography>\n                        <StyledSwitch\n                            onChange={handleThemeChange}\n                            checked={theme === ThemeEnum.Dark}\n                            color='secondary'\n                            inputRef={themeSwitchRef}\n                            checkedIcon={\n                                <CircleBox\n                                    onClick={(\n                                        e: MouseEvent<HTMLDivElement>\n                                    ) => {\n                                        if (themeSwitchRef.current) {\n                                            themeSwitchRef.current.click();\n                                        }\n                                    }}\n                                >\n                                    <Brightness3Icon />\n                                </CircleBox>\n                            }\n                            icon={\n                                <CircleBox\n                                    onClick={(\n                                        e: MouseEvent<HTMLDivElement>\n                                    ) => {\n                                        if (themeSwitchRef.current) {\n                                            themeSwitchRef.current.click();\n                                        }\n                                    }}\n                                >\n                                    <WhiteThemeIcon />\n                                </CircleBox>\n                            }\n                        />\n                        <Typography>\n                            {t<string>(`general:${ThemeEnum.Dark}`)}\n                        </Typography>\n                    </Stack>\n                </Grid>\n            </StyledToolbar>\n        </StyledAppbar>\n    );\n};\nexport default Header;\n","import { observer } from 'mobx-react';\nimport React, { ChangeEvent, useCallback, useContext, MouseEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Header from '../components/Header';\nimport Locale from '../constants/locale';\nimport LocalStorageKey from '../constants/localStorageKey';\nimport ThemeEnum from '../constants/theme';\nimport { UIContext } from '../store';\nimport UIStore from '../store/ui';\n\nconst HeaderContainer = () => {\n    const { t, i18n } = useTranslation(['general']);\n    const uiStore = useContext<UIStore>(UIContext);\n\n    const handleLocaleChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            i18n.changeLanguage(e.target.value);\n            localStorage.setItem(LocalStorageKey.Locale, e.target.value);\n            uiStore.setLocale(e.target.value as Locale);\n        },\n        [i18n, uiStore]\n    );\n    const handleThemeChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            localStorage.setItem(\n                LocalStorageKey.Theme,\n                e.target.checked ? ThemeEnum.Dark : ThemeEnum.White\n            );\n            uiStore.setTheme(\n                e.target.checked ? ThemeEnum.Dark : ThemeEnum.White\n            );\n        },\n        [uiStore]\n    );\n    const handleCollapseBtnClick = useCallback((e:MouseEvent<HTMLButtonElement>) => {\n        uiStore.setSidebarCollapse(!uiStore.getSidebarCollapse);\n    }, [uiStore])\n\n    return (\n        <Header\n            t={t}\n            locale={uiStore.getLocale}\n            theme={uiStore.getTheme}\n            sidebarCollapse={uiStore.getSidebarCollapse}\n            handleLocaleChange={handleLocaleChange}\n            handleThemeChange={handleThemeChange}\n            handleCollapseBtnClick={handleCollapseBtnClick}\n        />\n    );\n};\nexport default observer(HeaderContainer);\n","import { Grid } from '@mui/material';\nimport { styled } from '@mui/styles';\nimport React, { FunctionComponent, useContext } from 'react';\nimport Sidebar from '../containers/Sidebar';\nimport Header from '../containers/Header';\nimport { renderRoutes, RouteConfigComponentProps } from 'react-router-config';\nimport UIStore from 'src/store/ui';\nimport { UIContext } from 'src/store';\nimport { observer } from 'mobx-react';\n\nconst Background = styled(Grid)(({ theme }) => ({\n    background: theme.palette.background.default,\n    color: theme.palette.text.primary,\n    minHeight: 'max(50rem, 100vh)',\n    minWidth: '37.5rem',\n}));\nconst BasicLayout: FunctionComponent<RouteConfigComponentProps<{}>> = ({\n    route,\n}: RouteConfigComponentProps<{}>) => {\n    return (\n        <Background container direction='column'>\n            <Header />\n            <Grid\n                direction='row'\n                container\n                justifyContent={'flex-start'}\n                flexGrow={1}\n            >\n                <Grid item container xs={'auto'}>\n                    <Sidebar />\n                </Grid>\n                <Grid item>{route && renderRoutes(route.routes)}</Grid>\n            </Grid>\n        </Background>\n    );\n};\nexport default BasicLayout;\n","import React, { useContext, useMemo } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createTheme, responsiveFontSizes } from '@mui/material';\nimport { ThemeProvider } from '@mui/styles';\nimport UIStore from './store/ui';\nimport { observer } from 'mobx-react';\nimport Theme from './constants/theme';\nimport { UIContext } from './store';\nimport DarkTheme from './themes/dark';\nimport WhiteTheme from './themes/white';\nimport { renderRoutes } from 'react-router-config';\nimport routeConfig from './constants/route';\n\nfunction App() {\n    const uiStore = useContext<UIStore>(UIContext);\n    const theme = useMemo(\n        () =>\n            responsiveFontSizes(\n                createTheme(\n                    uiStore.getTheme === Theme.Dark ? DarkTheme : WhiteTheme\n                )\n            ),\n        [uiStore.getTheme]\n    );\n    return (\n        <ThemeProvider theme={theme}>\n            <BrowserRouter>{renderRoutes(routeConfig)}</BrowserRouter>\n        </ThemeProvider>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Locale from '../constants/locale';\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: Locale.EN,\n        ns: ['general'],\n        defaultNS: 'general',\n        debug: true,\n        interpolation: {\n            escapeValue: false,\n        },\n    });\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './utils/i18n';\nimport UIStore from './store/ui';\nimport { UIContext } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <UIContext.Provider value={new UIStore()}>\n            <Suspense fallback='loading'>\n                <App />\n            </Suspense>\n        </UIContext.Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}