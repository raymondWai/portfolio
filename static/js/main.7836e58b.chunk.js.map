{"version":3,"sources":["constants/theme.ts","constants/locale.ts","constants/localStorageKey.ts","store/ui.ts","constants/environment.ts","store/data.ts","store/index.ts","themes/dark.ts","themes/white.ts","components/StyledAutoComplete.tsx","components/ForcastBox.tsx","components/RadioInput.tsx","store/types.ts","constants/tempUnit.ts","components/Demo.tsx","utils/getGeoLocation.ts","utils/getWeatherLangMapping.ts","containers/Demo/index.tsx","constants/resumeData.ts","constants/route.tsx","components/Home.tsx","hooks/useWindowSize.ts","utils/getDisplayType.ts","containers/Home.tsx","components/Sidebar.tsx","containers/Sidebar.tsx","components/StyledSwitch.tsx","components/CircleBox.ts","components/Header.tsx","containers/Header.tsx","layouts/BasicLayout.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","utils/i18n.ts","index.tsx"],"names":["ThemeEnum","Locale","LocalStorageKey","UIStore","theme","locale","sidebarCollapse","makeAutoObservable","this","localStorage","getItem","Theme","Dark","EN","openWeatherApiKey","DataStore","weatherForcast","locationList","mapClient","loadingLocation","loadingWeather","window","google","mapDiv","document","createElement","maps","places","PlacesService","option","a","url","URL","params","URLSearchParams","Object","keys","forEach","key","value","append","search","toString","fetch","then","resp","json","catch","err","query","Promise","resolve","reject","findPlaceFromQuery","fields","status","PlacesServiceStatus","OK","map","location","label","formatted_address","coord","geometry","toJSON","UIContext","createContext","DataContext","DarkTheme","palette","primary","main","blue","light","dark","contrastText","secondary","text","background","default","dimension","header","sidebar","WhiteTheme","StyledPoper","styled","Popper","autocompleteClasses","listbox","border","noOptions","loading","color","AutoCompletePopper","props","StyledAutoComplete","useTheme","Autocomplete","PopperComponent","sx","root","width","input","inputRoot","CenterBox","Grid","display","justifyContent","minWidth","ForcastBox","feelTemp","min","max","noOfItems","date","tempUnit","pop","description","icon","t","item","container","direction","xs","Math","round","Typography","typography","Avatar","src","height","Intl","NumberFormat","style","format","memo","RowFormControl","FormControl","flexDirection","marginHorizontal","flexWrap","VCenterLabel","typographyClasses","alignSelf","marginRight","RadioInput","onChange","options","title","memoOptions","useMemo","index","FormControlLabel","control","Radio","checked","backgroundColor","translation","RadioGroup","row","flexGrow","overflow","ForcastExcludeType","ForcastUnitType","TempUnit","tempUnitMap","K","Standard","C","Metric","F","Imperial","Demo","weatherData","optionExpanded","onOptionUpdate","selectCurrentLocation","onOptionExpand","onLocationInputChange","onLocationSelect","WeatherForcasts","daily","filter","_","forcast","dayjs","add","temp","minimumSignificantDigits","maximumSignificantDigits","feels_like","morn","day","eve","night","reduce","prev","next","weather","length","padding","variant","alignItems","marginLeft","Card","elevation","CardHeader","action","IconButton","onClick","Collapse","in","e","Array","fill","values","disablePortal","autoComplete","renderInput","TextField","placeholder","noOptionsText","Button","marginTop","Skeleton","getGeoLocation","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","error","getWeatherLangMapping","lang","ZH","observer","useTranslation","dataStore","useContext","uiStore","searchDebounceObs","useRef","searchDebounceSub","useState","setOptions","setCoord","useCallback","current","target","parseFloat","getForcast","appid","units","type","parseInt","reason","details","lng","useEffect","Subject","pipe","debounceTime","subscribe","searchLocations","unsubscribe","sections","personalInfos","position","duration","company","workExperiences","educations","skills","languages","Routes","HomePageContainer","forwardRef","ref","children","restProps","StyledStepLabel","StepLabel","stepLabelClasses","Home","resumeEntries","expanded","activeSection","onExpand","onTitleClick","onSectionClick","stepperContainerRef","stepperRef","displayType","setDisplayType","size","setSize","updateSize","innerWidth","innerHeight","useLayoutEffect","addEventListener","removeEventListener","useWindowSize","windowHeight","element","clientHeight","component","alignContent","paddingLeft","maxHeight","overflowY","Stepper","orientation","activeStep","maxWidth","step","Step","optional","StepIconComponent","StepContent","borderLeft","section","marginBottom","textAlign","opacity","HomeContainer","exp","setResumeEntries","setActiveSection","entry","newEntries","newSection","findIndex","personalInfo","education","skill","language","StyledItemButton","ListItemButton","listItemButtonClasses","selected","RouteItem","name","collapse","ListItemIcon","ListItemText","margin","Sidebar","history","routes","route","pathname","RouteKeyMap","path","push","List","disablePadding","dense","bgcolor","borderRight","useLocation","useHistory","Switch","switchClasses","switchBase","paddingTop","Box","borderRadius","zIndex","StyledAppbar","AppBar","minHeight","StyledToolbar","Toolbar","toolbarClasses","WhiteThemeIcon","WbSunnyIcon","Header","handleLocaleChange","handleThemeChange","handleCollapseBtnClick","themeSwitchRef","transformOrigin","transform","Stack","spacing","White","StyledSwitch","inputRef","checkedIcon","CircleBox","click","i18n","changeLanguage","setItem","setLocale","setTheme","setSidebarCollapse","Background","BasicLayout","renderRoutes","lineHeight","routeConfig","exact","isLoaded","useJsApiLoader","googleMapsApiKey","libraries","preventGoogleFontsLoading","responsiveFontSizes","createTheme","setMapClient","ThemeProvider","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","ns","defaultNS","debug","interpolation","escapeValue","backend","loadPath","supportedLngs","ReactDOM","render","StrictMode","Provider","fallback","I18nextProvider","getElementById","process","href","origin","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7836e58b.chunk.js","sourcesContent":["enum ThemeEnum {\n    Dark = 'dark',\n    White = 'white',\n}\n\nexport default ThemeEnum;\n","enum Locale {\n    EN = \"en-US\",\n    ZH = \"zh-HK\"\n}\nexport default Locale;","enum LocalStorageKey {\n    Theme = 'theme',\n    Locale = 'locale'\n}\nexport default LocalStorageKey","import { makeAutoObservable } from 'mobx';\nimport Locale from '../constants/locale';\nimport LocalStorageKey from '../constants/localStorageKey';\nimport Theme from '../constants/theme';\n\nexport default class UIStore {\n    theme: Theme;\n    locale: Locale;\n    sidebarCollapse: boolean;\n\n    constructor() {\n        makeAutoObservable(this);\n        const theme = localStorage.getItem(LocalStorageKey.Theme);\n        const locale = localStorage.getItem(LocalStorageKey.Locale);\n        this.theme = (theme ? theme : Theme.Dark) as Theme;\n        this.locale = (locale ? locale : Locale.EN) as Locale;\n        this.sidebarCollapse = false;\n    }\n\n    setTheme(theme: Theme): void {\n        this.theme = theme;\n    }\n    setLocale(locale: Locale): void {\n        this.locale = locale;\n    }\n    setSidebarCollapse(sidebarCollapse: boolean): void {\n        this.sidebarCollapse = sidebarCollapse\n    }\n}\n","export const openWeatherApiKey = '8e7fe94d87845441580ed0d1abf34272';\nexport const googleMapApiKey = 'AIzaSyB-QeBu6TTAny47-Xv-nW8XEz4aGTF3DXs';\nexport const baseURL = 'https://api.openweathermap.org/data/2.5';\nexport const weatherIconBaseURL = 'http://openweathermap.org/img/wn/'\n","import { makeAutoObservable } from 'mobx';\nimport { baseURL } from 'src/constants/environment';\nimport type {\n    ForcastOption,\n    LocationLabelType,\n    WeatherForecastType,\n} from './types';\n\nexport default class DataStore {\n    weatherForcast: WeatherForecastType | null;//weather forcast data fetched\n    locationList: Array<LocationLabelType>; //location match the user input\n    mapClient: google.maps.places.PlacesService | null;//mapClient which used to call google api\n    loadingLocation: boolean;\n    loadingWeather: boolean;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.weatherForcast = null;\n        this.locationList = [];\n        this.mapClient = null;\n        this.loadingLocation = false;\n        this.loadingWeather = false;\n        if (window.google) {\n            const mapDiv = document.createElement('div');\n            this.mapClient = new window.google.maps.places.PlacesService(\n                mapDiv\n            );\n        }\n    }\n\n    async getForcast(option: ForcastOption) {\n        const url = new URL(`${baseURL}/onecall`);\n        const params = new URLSearchParams();\n        Object.keys(option).forEach((key) => {\n            const value = option[key as keyof ForcastOption];\n            if (value) {\n                params.append(key, value);\n            }\n        });\n        url.search = params.toString();\n        this.loadingWeather = true;\n        fetch(url.toString())\n            .then((resp) => resp.json())\n            .then((resp) => {\n                this.weatherForcast = resp;\n                this.loadingWeather = false;\n            })\n            .catch((err) => {\n                this.loadingWeather = false;\n            });\n    }\n\n    setMapClient() {\n        const mapDiv = document.createElement('div');\n        if (window.google) {\n            this.mapClient = new window.google.maps.places.PlacesService(\n                mapDiv\n            );\n        }\n    }\n\n    async searchLocations(query: string) {\n        return await new Promise((resolve, reject) => {\n            if (this.mapClient) {\n                this.loadingLocation = true;\n                this.mapClient.findPlaceFromQuery(\n                    {\n                        fields: ['formatted_address', 'geometry'],// get formatted_address and geometry only to save cost\n                        query,\n                    },\n                    (resp, status) => {\n                        this.loadingLocation = false; // stop loading anyway\n                        if (\n                            status === google.maps.places.PlacesServiceStatus.OK\n                        ) {\n                            //if ok, update location list\n                            resolve(resp);\n                            if (resp) {\n                                this.locationList = resp.map((location) => ({\n                                    label: location.formatted_address,\n                                    coord: location.geometry?.location?.toJSON(),\n                                }));\n                            }\n                        } else {\n                            //do nothing and reject\n                            reject(status);\n                        }\n                    }\n                );\n            } else {\n                reject('apiNotLoaded');\n            }\n        });\n    }\n}\n","import { createContext } from 'react';\nimport UIStore from './ui';\nimport DataStore from './data';\n\nexport const UIContext = createContext<UIStore>(new UIStore());\nexport const DataContext = createContext<DataStore>(new DataStore());\n","import { blue } from '@mui/material/colors';\nimport { CustomTheme } from './type';\n\nconst DarkTheme: CustomTheme = {\n    palette: {\n        primary: {\n            main: blue[400],\n            light: blue[300],\n            dark: blue[800],\n            contrastText: '#ffffff',\n        },\n        secondary: {\n            main: '#fdf100',\n            light: '#f9f395',\n            dark: '#ded502',\n            contrastText: '#000000',\n        },\n        text: {\n            primary: '#ffffff',\n            secondary: '#ffffff',\n        },\n        background: {\n            default: '#161616',\n        },\n    },\n    dimension: {\n        header: '3rem',\n        sidebar: '10rem',\n    },\n};\nexport default DarkTheme;\n","import { CustomTheme } from './type';\n\nconst WhiteTheme: CustomTheme = {\n    palette: {\n        primary: {\n            main: '#3fb550',\n            light: '#8ff1a4',\n            dark: '#3ab14c',\n            contrastText: '#161616',\n        },\n        secondary: {\n            main: '#0024fd',\n            light: '#7a82f3',\n            dark: '#0a22b3',\n            contrastText: '#161616',\n        },\n        text: {\n            primary: '#161616',\n            secondary: '#161616',\n        },\n        background: {\n            default: '#e0dede',\n        },\n    },\n    dimension: {\n        header: '3rem',\n        sidebar: '10rem',\n    },\n};\nexport default WhiteTheme;\n","import React from 'react';\nimport {\n    Autocomplete,\n    autocompleteClasses,\n    AutocompleteProps,\n    Popper,\n    useTheme,\n} from '@mui/material';\nimport { styled } from '@mui/styles';\n\ninterface PopperComponentProps {\n    anchorEl?: any;\n    disablePortal?: boolean;\n    open: boolean;\n}\n\nconst StyledPoper = styled(Popper)(({ theme }) => ({\n    [`& .${autocompleteClasses.listbox}`]: {\n        background: theme.palette.background.default,\n        border: `0.1rem solid ${theme.palette.primary.light}`,\n    },\n    [`& .${autocompleteClasses.noOptions}, .${autocompleteClasses.loading}`]: {\n        background: theme.palette.background.default,\n        color: theme.palette.text.primary,\n        border: `0.1rem solid ${theme.palette.primary.light}`,\n    },\n}));\nconst AutoCompletePopper = (props: PopperComponentProps) => (\n    <StyledPoper {...props} />\n);\n\nexport default function StyledAutoComplete<T>(\n    props: AutocompleteProps<\n        T,\n        boolean | undefined,\n        boolean | undefined,\n        boolean | undefined,\n        'div'\n    >\n) {\n    const theme = useTheme();\n    return (\n        <Autocomplete\n            {...props}\n            PopperComponent={AutoCompletePopper}\n            sx={{\n                [`&.${autocompleteClasses.root}`]: {\n                    width: '50vw',\n                },\n                [`& .${autocompleteClasses.input}`]: {\n                    color: theme.palette.text.primary,\n                },\n                [`& .${autocompleteClasses.inputRoot}, .${autocompleteClasses.inputRoot}:hover`]:\n                    {\n                        border: `0.1rem solid ${theme.palette.primary.main}`,\n                    },\n            }}\n        />\n    );\n}\n","import { Avatar, Grid, Typography } from '@mui/material';\nimport { styled } from '@mui/system';\nimport React, { memo } from 'react';\nimport { TFunction } from 'react-i18next';\nimport TempUnit from 'src/constants/tempUnit';\n\ninterface ForcastBoxProps {\n    feelTemp: string;\n    min: number;\n    max: number;\n    noOfItems: number;\n    date: string;\n    tempUnit: TempUnit;\n    pop: number;\n    icon: string;\n    description: string;\n    t: TFunction;\n}\nconst CenterBox = styled(Grid)({\n    display: 'flex',\n    justifyContent: 'center',\n    minWidth: 180,\n});\nconst ForcastBox = ({\n    feelTemp,\n    min,\n    max,\n    noOfItems,\n    date,\n    tempUnit,\n    pop,\n    description,\n    icon,\n    t,\n}: ForcastBoxProps) => {\n    return (\n        <Grid\n            item\n            container\n            justifyContent='center'\n            direction={'column'}\n            xs={Math.round(12 / noOfItems)}\n            sx={{\n                minWidth: 200\n            }}\n        >\n            <CenterBox>\n                <Typography sx={{ typography: 'h6' }}>{date}</Typography>\n            </CenterBox>\n            {icon && (\n                <CenterBox>\n                    <Avatar\n                        src={icon}\n                        sx={{\n                            width: 96,\n                            height: 96,\n                        }}\n                    />\n                </CenterBox>\n            )}\n            <CenterBox>\n                <Typography sx={{ typography: 'body1' }}>\n                    {`${t('demo:feel_likes')}: `}\n                    {`${feelTemp}${t(`demo:tempUnit_${tempUnit}`)}`}\n                </Typography>\n            </CenterBox>\n            {description && (\n                <CenterBox>\n                    <Typography sx={{ typography: 'body1' }}>\n                        {`${t('demo:description')}: `}\n                        {description}\n                    </Typography>\n                </CenterBox>\n            )}\n            <CenterBox>\n                <Typography sx={{ typography: 'body1' }}>\n                    {`${t('demo:precipitation')}: `}\n                    {Intl.NumberFormat('en-US', { style: 'percent' }).format(\n                        pop\n                    )}\n                </Typography>\n            </CenterBox>\n            <CenterBox>\n                <Typography sx={{ typography: 'body1' }}>\n                    {`${t('demo:max_temp')}: `}\n                    {`${max}${t(`demo:tempUnit_${tempUnit}`)}`}\n                </Typography>\n            </CenterBox>\n            <CenterBox>\n                <Typography sx={{ typography: 'body1' }}>\n                    {`${t('demo:min_temp')}: `}\n                    {`${min}${t(`demo:tempUnit_${tempUnit}`)}`}\n                </Typography>\n            </CenterBox>\n        </Grid>\n    );\n};\nexport default memo(ForcastBox);\n","import React, { ChangeEvent, useMemo } from 'react';\nimport {\n    FormControl,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    Typography,\n    typographyClasses,\n} from '@mui/material';\nimport { styled } from '@mui/system';\n\nconst RowFormControl = styled(FormControl)(({ theme }) => ({\n    flexDirection: 'row',\n    marginHorizontal: '1rem',\n    display: 'flex',\n    flexWrap: 'wrap',\n}));\nconst VCenterLabel = styled(Typography)(({ theme }) => ({\n    [`&.${typographyClasses.root}`]: {\n        alignSelf: 'center',\n        marginRight: '1rem !important',\n        color: theme.palette.text.primary,\n    },\n}));\n\ninterface RadioInputProps<OptionType> {\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    title: string;\n    options: Array<{\n        value: OptionType;\n        translation: string;\n    }>;\n    value: OptionType;\n}\n\nexport default function RadioInput<OptionType>({\n    onChange,\n    options,\n    value,\n    title,\n}: RadioInputProps<OptionType>) {\n    const memoOptions = useMemo(\n        () =>\n            options.map((option, index) => (\n                <FormControlLabel\n                    value={option.value}\n                    control={\n                        <Radio\n                            color='secondary'\n                            checked={value === option.value}\n                            sx={{\n                                '& input:hover, &:hover': {\n                                    backgroundColor: 'rgba(0,0,0,0)'\n                                },\n                            }}\n                        />\n                    }\n                    label={option.translation}\n                    key={`${value}-${index}`}\n                />\n            )),\n        [value, options]\n    );\n    return (\n        <RowFormControl>\n            <VCenterLabel>{title}</VCenterLabel>\n            <RadioGroup\n                row\n                aria-label={title}\n                onChange={onChange}\n                sx={{\n                    display: 'flex',\n                    flexGrow: 1,\n                    flexDirection: 'row',\n                    overflow: 'auto',\n                }}\n            >\n                {memoOptions}\n            </RadioGroup>\n        </RowFormControl>\n    );\n}\n","type CurrentWeather = {\n    dt: number;\n    sunrise: number;\n    sunset: number;\n    temp: number;\n    feels_like: number;\n    pressure: number;\n    humidity: number;\n    dew_point: number; //atm temperature\n    clouds: number;\n    uvi: number;\n    visibility: number;\n    wind_speed: number;\n    wind_gust?: number;\n    wind_deg: number; //direction, degrees\n    weather: Array<{\n        id: number;\n        main: string;\n        description: string;\n        icon: string;\n    }>;\n    rain: {\n        '1h'?: number;\n    };\n    snow: {\n        '1h'?: number;\n    };\n};\nexport type WeatherForecastType = {\n    lat: number;\n    lon: number;\n    timezone: string;\n    timezone_offset: number;\n    current: CurrentWeather;\n    minutely: Array<{\n        dt: number;\n        precipitation: number;\n    }>;\n    hourly: Array<\n        Omit<CurrentWeather, 'sunrise' | 'sunset'> & {\n            pop: number;\n        }\n    >;\n    daily: Array<\n        Omit<CurrentWeather, 'temp' | 'feels_like' | 'rain' | 'snow'> & {\n            moonrise: number;\n            moonset: number;\n            moon_phase: number;\n            temp: {\n                morn: number;\n                day: number;\n                eve: number;\n                night: number;\n                min: number;\n                max: number;\n            };\n            feels_like: {\n                morn: number;\n                day: number;\n                eve: number;\n                night: number;\n            };\n            pop: number;\n            rain?: number;\n            snow?: number;\n        }\n    >;\n    alerts: Array<{\n        sender_name: string;\n        event: string;\n        start: number;\n        end: number;\n        description: string;\n        tags: Array<string>;\n    }>;\n};\n\nexport enum ForcastExcludeType {\n    Current = 'current',\n    Minutely = 'minutely',\n    Hourly = 'hourly',\n    Daily = 'daily',\n    Alerts = 'alerts',\n}\nexport enum ForcastUnitType {\n    Standard = 'standard',\n    Metric = 'metric',\n    Imperial = 'imperial',\n\n}\nexport type ForcastOption = {\n    lat: string;\n    lon: string;\n    appid: string; //apiKey\n    exclude?: ForcastExcludeType; //if specified, the field will be excluded. format: key1,key2\n    units?: ForcastUnitType;\n    lang?: string;\n};\n\nexport type AutoCompleteLabelType = {\n    label?: string\n}\nexport type LocationLabelType = AutoCompleteLabelType & {\n    coord?: google.maps.LatLngLiteral\n}","import { ForcastUnitType } from 'src/store/types';\n\nenum TempUnit {\n    K = 'K',\n    C = 'C',\n    F = 'F',\n}\n\nexport const tempUnitMap: {\n    [key in TempUnit]: ForcastUnitType;\n} = {\n    [TempUnit.K]: ForcastUnitType.Standard,\n    [TempUnit.C]: ForcastUnitType.Metric,\n    [TempUnit.F]: ForcastUnitType.Imperial,\n};\nexport default TempUnit;\n","import {\n    AutocompleteChangeDetails,\n    Button,\n    Card,\n    CardHeader,\n    Collapse,\n    Grid,\n    IconButton,\n    Skeleton,\n    TextField,\n    Typography,\n} from '@mui/material';\nimport React, {\n    ChangeEvent,\n    memo,\n    MouseEvent,\n    SyntheticEvent,\n    useMemo,\n} from 'react';\nimport { LocationLabelType, WeatherForecastType } from 'src/store/types';\nimport StyledAutoComplete from './StyledAutoComplete';\nimport FilterDramaIcon from '@mui/icons-material/FilterDrama';\nimport FlashOnIcon from '@mui/icons-material/FlashOn';\nimport { TFunction } from 'react-i18next';\nimport ForcastBox from './ForcastBox';\nimport RadioInput from './RadioInput';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport dayjs from 'dayjs';\nimport TempUnit from 'src/constants/tempUnit';\nimport { Option } from 'src/containers/Demo/types';\nimport { weatherIconBaseURL } from 'src/constants/environment';\ninterface DemoProps {\n    locationList: Array<{\n        label?: string;\n        coord?: google.maps.LatLngLiteral;\n    }>;\n    weatherData: WeatherForecastType | null;\n    optionExpanded: boolean;\n    noOfItems: number;\n    tempUnit: TempUnit;\n    loadingLocation: boolean;\n    loadingWeather: boolean;\n    t: TFunction;\n    onOptionUpdate: (\n        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n        type: keyof Option\n    ) => void;\n    selectCurrentLocation: (e: MouseEvent<HTMLButtonElement>) => void;\n    onOptionExpand: (e: MouseEvent<HTMLButtonElement>) => void;\n    onLocationInputChange: (\n        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => void;\n    onLocationSelect: (\n        e: SyntheticEvent,\n        value:\n            | string\n            | LocationLabelType\n            | (string | LocationLabelType)[]\n            | null,\n        reason: string,\n        details?: AutocompleteChangeDetails<LocationLabelType> | undefined\n    ) => void;\n}\nconst Demo = ({\n    locationList,\n    weatherData,\n    noOfItems,\n    optionExpanded,\n    tempUnit,\n    loadingWeather,\n    loadingLocation,\n    t,\n    onOptionUpdate,\n    selectCurrentLocation,\n    onOptionExpand,\n    onLocationInputChange,\n    onLocationSelect,\n}: DemoProps) => {\n    const WeatherForcasts = useMemo(\n        () =>\n            weatherData?.daily\n                .filter((_, index) => index < noOfItems)\n                .map((forcast, index) => {\n                    const date = dayjs()\n                        .add(index + 1)\n                        .format('D MMM YYYY, ddd');\n                    const { min, max } = forcast.temp;\n                    return (\n                        <ForcastBox\n                            feelTemp={Intl.NumberFormat('en-US', {\n                                minimumSignificantDigits: 2,\n                                maximumSignificantDigits: 3,\n                            }).format(\n                                [\n                                    forcast.feels_like.morn,\n                                    forcast.feels_like.day,\n                                    forcast.feels_like.eve,\n                                    forcast.feels_like.night,\n                                ].reduce((prev, next) => prev + next, 0) / 4\n                            )}\n                            min={min}\n                            max={max}\n                            noOfItems={noOfItems}\n                            date={date}\n                            pop={forcast.pop}\n                            tempUnit={tempUnit}\n                            description={\n                                forcast.weather.length > 0\n                                    ? forcast.weather[0].description\n                                    : ''\n                            }\n                            icon={\n                                forcast.weather[0]\n                                    ? `${weatherIconBaseURL}${forcast.weather[0].icon}@2x.png`\n                                    : ''\n                            }\n                            t={t}\n                        />\n                    );\n                }),\n        [weatherData, noOfItems, tempUnit, t]\n    );\n    return (\n        <Grid\n            container\n            direction='column'\n            sx={{\n                padding: '1rem 2rem',\n            }}\n        >\n            <Typography\n                variant={'h4'}\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'secondary.main',\n                }}\n            >\n                <FilterDramaIcon\n                    sx={{ marginRight: '1rem', color: 'text.primary' }}\n                />\n                {t('demo:greeting')}\n                <FlashOnIcon\n                    sx={{ marginLeft: '1rem', color: 'text.primary' }}\n                />\n            </Typography>\n            <Card\n                elevation={0}\n                sx={{\n                    backgroundColor: 'background.default',\n                }}\n            >\n                <Grid container direction='column'>\n                    <Grid\n                        item\n                        container\n                        direction='row'\n                        justifyContent={'center'}\n                    >\n                        <CardHeader\n                            title={t('demo:options')}\n                            action={\n                                <IconButton onClick={onOptionExpand}>\n                                    {optionExpanded ? (\n                                        <ExpandLessIcon\n                                            sx={{\n                                                color: 'text.primary',\n                                            }}\n                                        />\n                                    ) : (\n                                        <ExpandMoreIcon\n                                            sx={{\n                                                color: 'text.primary',\n                                            }}\n                                        />\n                                    )}\n                                </IconButton>\n                            }\n                        />\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        direction='row'\n                        justifyContent={'center'}\n                    >\n                        <Collapse in={optionExpanded}>\n                            <Grid item container direction='column'>\n                                <Grid\n                                    item\n                                    container\n                                    direction='row'\n                                    justifyContent='center'\n                                >\n                                    <RadioInput<number>\n                                        onChange={(e) =>\n                                            onOptionUpdate(e, 'noOfItems')\n                                        }\n                                        title={t('demo:no_of_day')}\n                                        options={new Array(5)\n                                            .fill(2)\n                                            .map((value, index) => ({\n                                                value: value + index,\n                                                translation: `${value + index}`,\n                                            }))}\n                                        value={noOfItems}\n                                    />\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    direction='row'\n                                    justifyContent='center'\n                                >\n                                    <RadioInput<TempUnit>\n                                        onChange={(e) =>\n                                            onOptionUpdate(e, 'tempUnit')\n                                        }\n                                        title={t('demo:tempUnit')}\n                                        options={Object.values(TempUnit).map(\n                                            (value) => ({\n                                                value: value,\n                                                translation: t(\n                                                    `demo:tempUnit_${value}`\n                                                ),\n                                            })\n                                        )}\n                                        value={tempUnit}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Collapse>\n                    </Grid>\n                </Grid>\n            </Card>\n            <Grid item container direction='row' justifyContent={'center'}>\n                <Grid item container justifyContent={'center'} xs={6}>\n                    <StyledAutoComplete<LocationLabelType>\n                        disablePortal\n                        autoComplete\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                onChange={onLocationInputChange}\n                                placeholder={t('demo:input_location')}\n                            />\n                        )}\n                        noOptionsText={t('demo:location_not_found')}\n                        onChange={onLocationSelect}\n                        options={locationList}\n                        loading={loadingLocation}\n                    />\n                </Grid>\n                <Button\n                    onClick={selectCurrentLocation}\n                    sx={{\n                        color: 'text.primary',\n                    }}\n                >\n                    {t('demo:select_current_location')}\n                </Button>\n            </Grid>\n            {WeatherForcasts && (\n                <Grid\n                    item\n                    container\n                    direction='row'\n                    justifyContent={'center'}\n                    flexWrap={'wrap'}\n                    sx={{\n                        marginTop: '1rem',\n                        flexGrow: 1,\n                    }}\n                >\n                    {loadingWeather ? (\n                        <Skeleton\n                            variant='rectangular'\n                            height={'30vh'}\n                            width={'50vw'}\n                        />\n                    ) : (\n                        WeatherForcasts\n                    )}\n                </Grid>\n            )}\n        </Grid>\n    );\n};\nexport default memo(Demo);\n","export const getGeoLocation = async () => {\n    return await new Promise<{\n        lat: string;\n        lon: string;\n    }>((resolve, reject) => {\n        //get location from broswer api if browser support it\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (pos) =>\n                    resolve({\n                        lat: pos.coords.latitude.toString(),\n                        lon: pos.coords.longitude.toString(),\n                    }),\n                (error) => reject(error)\n            );\n        }\n    });\n};\n","import Locale from 'src/constants/locale';\n\nexport const getWeatherLangMapping = (lang: Locale) => {\n    switch (lang) {\n        case Locale.EN:\n            return 'en';\n        case Locale.ZH:\n            return 'zh_tw';\n    }\n};\n","import { observer } from 'mobx-react';\nimport React, {\n    ChangeEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    MouseEvent,\n    useState,\n    SyntheticEvent,\n} from 'react';\nimport Demo from 'src/components/Demo';\nimport { openWeatherApiKey } from 'src/constants/environment';\nimport { UIContext, DataContext } from 'src/store';\nimport UIStore from 'src/store/ui';\nimport DataStore from 'src/store/data';\nimport { getGeoLocation } from 'src/utils/getGeoLocation';\nimport { getWeatherLangMapping } from 'src/utils/getWeatherLangMapping';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subject, Subscription } from 'rxjs';\nimport { useTranslation } from 'react-i18next';\nimport TempUnit, { tempUnitMap } from 'src/constants/tempUnit';\nimport { Option } from './types';\nimport { LocationLabelType } from 'src/store/types';\nimport { AutocompleteChangeDetails } from '@mui/material';\n\ninterface DemoProps {}\nconst DemoContainer = (props: DemoProps) => {\n    const { t } = useTranslation(['demo']);\n    const dataStore = useContext<DataStore>(DataContext);\n    const uiStore = useContext<UIStore>(UIContext);\n    const searchDebounceObs = useRef<Subject<string> | null>(null);\n    const searchDebounceSub = useRef<Subscription | null>(null);\n    const [options, setOptions] = useState<Option>({\n        noOfItems: 5,\n        tempUnit: TempUnit.C,\n        optionExpanded: false,\n    });\n    const [coord, setCoord] = useState<{\n        lat: number | null;\n        lon: number | null;\n    }>({\n        lat: null,\n        lon: null,\n    });\n\n    const onLocationInputChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            //emit value to debounce ovserver\n            if (searchDebounceObs.current) {\n                searchDebounceObs.current.next(e.target.value);\n            }\n        },\n        [searchDebounceObs]\n    );\n    const selectCurrentLocation = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            getGeoLocation().then(({ lat, lon }) => {\n                setCoord({\n                    lat: parseFloat(lat),\n                    lon: parseFloat(lon),\n                });\n                //get weather forcast\n                dataStore.getForcast({\n                    lat,\n                    lon,\n                    appid: openWeatherApiKey,\n                    lang: getWeatherLangMapping(uiStore.locale),\n                    units: tempUnitMap[options.tempUnit],\n                });\n            });\n        },\n        [dataStore, uiStore, options, setCoord]\n    );\n    const onOptionExpand = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            setOptions({\n                ...options,\n                optionExpanded: !options.optionExpanded,\n            });\n        },\n        [setOptions, options]\n    );\n    const onOptionUpdate = useCallback(\n        (\n            e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n            type: keyof Option\n        ) => {\n            switch (type) {\n                case 'noOfItems':\n                    setOptions({\n                        ...options,\n                        noOfItems: parseInt(e.target.value),\n                    });\n                    break;\n                case 'tempUnit':\n                    setOptions({\n                        ...options,\n                        tempUnit: e.target.value as TempUnit,\n                    });\n                    break;\n            }\n        },\n        [options, setOptions]\n    );\n    const onLocationSelect = useCallback(\n        (\n            e: SyntheticEvent,\n            value:\n                | string\n                | LocationLabelType\n                | (string | LocationLabelType)[]\n                | null,\n            reason: string,\n            details?: AutocompleteChangeDetails<LocationLabelType> | undefined\n        ) => {\n            if (details?.option && details?.option.coord) {\n                const { lat, lng } = details?.option.coord;\n                setCoord({\n                    lat,\n                    lon: lng,\n                });\n            }\n        },\n        [setCoord]\n    );\n\n    useEffect(() => {\n        //set debounce input subscription\n        searchDebounceObs.current = new Subject<string>();\n        searchDebounceSub.current = searchDebounceObs.current\n            ?.pipe(debounceTime(500))\n            .subscribe((query) => {\n                dataStore.searchLocations(query);\n            });\n        return () => {\n            //unsubscribe the observer when clean up\n            searchDebounceSub.current?.unsubscribe();\n        };\n    }, [searchDebounceObs, searchDebounceSub, dataStore]);\n\n    useEffect(() => {\n        if (coord.lat && coord.lon) {\n            //auto refetch the forcast when coord, language, unit changed\n            dataStore.getForcast({\n                lat: coord.lat.toString(),\n                lon: coord.lon.toString(),\n                appid: openWeatherApiKey,\n                lang: getWeatherLangMapping(uiStore.locale),\n                units: tempUnitMap[options.tempUnit],\n            });\n        }\n    }, [uiStore.locale, options, coord, dataStore, dataStore.getForcast]);\n    return (\n        <Demo\n            locationList={dataStore.locationList}\n            weatherData={dataStore.weatherForcast}\n            optionExpanded={options.optionExpanded}\n            noOfItems={options.noOfItems}\n            tempUnit={options.tempUnit}\n            loadingLocation={dataStore.loadingLocation}\n            loadingWeather={dataStore.loadingWeather}\n            t={t}\n            onLocationInputChange={onLocationInputChange}\n            selectCurrentLocation={selectCurrentLocation}\n            onOptionUpdate={onOptionUpdate}\n            onOptionExpand={onOptionExpand}\n            onLocationSelect={onLocationSelect}\n        />\n    );\n};\nexport default observer(DemoContainer);\n","/* eslint-disable no-multi-str */\nexport const sections = [\n    'personal_info',\n    'work_experience',\n    'education',\n    'skills',\n    'languages',\n];\n\nexport interface ResumeEntryType {\n    position: string;\n    duration: string;\n    company: string;\n    description: string;\n}\n\nexport const personalInfos: Array<ResumeEntryType> = [\n    {\n        position: 'Man Ho Wai',\n        duration: 'Mr.',\n        company: 'waimanho2765galois@gmail.com',\n        description: '6475635796',\n    },\n    {\n        position: 'Pemberton ave',\n        duration: 'North York',\n        company: 'Ontario',\n        description: '',\n    },\n];\n\nexport const workExperiences: Array<ResumeEntryType> = [\n    {\n        position: 'Software Engineer(Associate)',\n        duration: 'May 2019 - Oct 2021',\n        company: 'EGUSI',\n        description:\n            'Develop web/app/back-end from scratch or take over from other teams \\\n            Debugging Create maintaining doc',\n    },\n    {\n        position: 'Software Engineer',\n        duration: 'Oct 2020 - Apr 2020',\n        company: 'MFinance',\n        description:\n            'Responsible for developing a full function stock trading web app with \\\n            real-time chart rendering, order management(create, amend, cancel, show \\\n                history), IPO(list, detail, apply, amend, cancel), News, account \\\n                management',\n    },\n    {\n        position: 'Software Engineer',\n        duration: 'Apr 2020 - Oct 2021',\n        company: 'Siemens',\n        description:\n            'Develop and Debug a ticket management system. Migrate the auto CI/CD \\\n            system from local server to aws and integrated with eks, alb and s3. \\\n            Added multi-node capability to the system. Communicate with the client \\\n            to confirm some change request and provide estimation of task.',\n    },\n];\n\nexport const educations: Array<ResumeEntryType> = [\n    {\n        position: \"Bachelor's Degree in Physics\",\n        duration: 'HKUST',\n        company: 'Sep 2016 - Feb 2020',\n        description:\n            'Major in Physics and Minor in Cosmology while my capstone is about Machine Learning.',\n    },\n];\n\nexport const skills: Array<ResumeEntryType> = [\n    {\n        position: 'Typescript',\n        duration: '3 yrs',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'React.js',\n        duration: '3 yrs',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Express',\n        duration: '2 yrs',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'React Native',\n        duration: '3 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'AngularJs',\n        duration: '1 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Next.js',\n        duration: '1 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'MongoDB',\n        duration: '1 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'MySQL',\n        duration: '1 yrs',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Laravel',\n        duration: '2 yrs',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Redis',\n        duration: '1 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Aws',\n        duration: '1 yr',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Python',\n        duration: '2 yr',\n        company: '',\n        description: '',\n    },\n    // {\n    //     position: 'PWA',\n    //     duration: '1 yr',\n    //     company: '',\n    //     description: '',\n    // },\n];\nexport const languages: Array<ResumeEntryType> = [\n    {\n        position: 'Cantonese',\n        duration: 'Native',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'English',\n        duration: 'Intermediate',\n        company: '',\n        description: '',\n    },\n    {\n        position: 'Japanese',\n        duration: 'Intermediate',\n        company: '',\n        description: '',\n    },\n];\n\n/* eslint-enable no-multi-str */","import React from 'react';\nimport { RouteConfig } from 'react-router-config';\nimport Demo from 'src/containers/Demo';\nimport Home from 'src/containers/Home';\nimport BasicLayout from 'src/layouts/BasicLayout';\nimport HomeIcon from '@mui/icons-material/Home';\nimport SlideshowIcon from '@mui/icons-material/Slideshow';\n\nexport enum Routes {\n    Home = 'home',\n    Demo = 'demo',\n}\nexport const RouteKeyMap = {\n    [Routes.Home]: {\n        path: '/portfolio/',\n        icon: ({ selected }: { selected: boolean }) => (\n            <HomeIcon\n                sx={{\n                    color: selected ? 'text.primary' : 'primary.contrastText',\n                    lineHeight: 1.43,\n                }}\n            />\n        ),\n    },\n    [Routes.Demo]: {\n        path: '/portfolio/demo',\n        icon: ({ selected }: { selected: boolean }) => (\n            <SlideshowIcon\n                sx={{\n                    color: selected ? 'text.primary' : 'primary.contrastText',\n                    lineHeight: 1.43,\n                }}\n            />\n        ),\n    },\n};\nconst routeConfig: Array<RouteConfig> = [\n    {\n        component: BasicLayout,\n        routes: [\n            {\n                path: RouteKeyMap[Routes.Home].path,\n                exact: true,\n                key: Routes.Home,\n                component: Home,\n            },\n            {\n                path: RouteKeyMap[Routes.Demo].path,\n                exact: true,\n                key: Routes.Demo,\n                component: Demo,\n            },\n        ],\n    },\n];\nexport default routeConfig;\n","import React, {\n    forwardRef,\n    RefObject,\n    MouseEvent,\n    useRef,\n    useState,\n    useEffect,\n} from 'react';\nimport {\n    Button,\n    Grid,\n    GridTypeMap,\n    Step,\n    StepContent,\n    StepLabel,\n    stepLabelClasses,\n    Stepper,\n    Typography,\n} from '@mui/material';\nimport { DefaultComponentProps } from '@mui/material/OverridableComponent';\nimport { ResumeEntryType, sections } from 'src/constants/resumeData';\nimport { styled, useTheme } from '@mui/styles';\nimport { TFunction } from 'react-i18next';\nimport InfoIcon from '@mui/icons-material/Info';\nimport { getDisplayType } from 'src/utils/getDisplayType';\nimport { useWindowSize } from 'src/hooks/useWindowSize';\n\nconst HomePageContainer = forwardRef<\n    RefObject<HTMLDivElement>,\n    DefaultComponentProps<GridTypeMap<{}, 'div'>> & { component: 'div' }\n>(({ children, ...restProps }, ref) => (\n    <Grid {...restProps} ref={ref as RefObject<HTMLDivElement>}>\n        {children}\n    </Grid>\n));\n\nconst StyledStepLabel = styled(StepLabel)(({ theme }) => ({\n    [`& .${stepLabelClasses.label}`]: {\n        color: `${theme.palette.secondary.main} !important`,\n    },\n}));\ninterface HomeProps {\n    expanded: boolean;\n    resumeEntries: Array<ResumeEntryType & { expanded: boolean }>;\n    activeSection: number;\n    t: TFunction;\n    onExpand: (e: MouseEvent<HTMLButtonElement>) => void;\n    onTitleClick: (e: MouseEvent<HTMLDivElement>, index: number) => void;\n    onSectionClick: (section: string) => void;\n}\nconst Home = ({\n    resumeEntries,\n    expanded,\n    activeSection,\n    t,\n    onExpand,\n    onTitleClick,\n    onSectionClick,\n}: HomeProps) => {\n    const theme = useTheme();\n\n    const stepperContainerRef = useRef<HTMLDivElement>(null);\n    const stepperRef = useRef<HTMLDivElement>(null);\n    const [displayType, setDisplayType] = useState('flex');\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const [_, windowHeight] = useWindowSize();\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    useEffect(() => {\n        setDisplayType(getDisplayType(stepperContainerRef, stepperRef));\n    }, [windowHeight, setDisplayType, stepperContainerRef, stepperRef]);\n    return (\n        <HomePageContainer\n            container\n            direction={'row'}\n            component='div'\n            sx={{\n                height: '100%',\n            }}\n        >\n            <Grid\n                item\n                container\n                xs={9}\n                justifyContent={'flex-start'}\n                alignContent={'center'}\n                flexGrow={1}\n                sx={{\n                    paddingLeft: '5%',\n                    maxHeight: 'max(12rem, 100vh - 5rem)',\n                    overflowY: 'scroll',\n                    display: displayType,\n                }}\n                ref={stepperContainerRef}\n            >\n                <Stepper\n                    orientation='vertical'\n                    activeStep={-1}\n                    sx={{\n                        maxWidth: '80%',\n                    }}\n                    ref={stepperRef}\n                >\n                    {resumeEntries.map((step, index) => (\n                        <Step key={index} expanded={step.expanded}>\n                            <StyledStepLabel\n                                optional={\n                                    <Grid item container direction={'column'}>\n                                        <Typography\n                                            sx={{\n                                                color: 'secondary.light',\n                                            }}\n                                        >\n                                            {step.company}\n                                        </Typography>\n                                        <Typography\n                                            sx={{\n                                                color: 'secondary.light',\n                                            }}\n                                        >\n                                            {step.duration}\n                                        </Typography>\n                                    </Grid>\n                                }\n                                StepIconComponent={(props) => (\n                                    <InfoIcon sx={{ color: 'primary.main' }} />\n                                )}\n                                onClick={(e: MouseEvent<HTMLDivElement>) =>\n                                    onTitleClick(e, index)\n                                }\n                            >\n                                {step.position}\n                            </StyledStepLabel>\n                            <StepContent>{step.description}</StepContent>\n                        </Step>\n                    ))}\n                </Stepper>\n            </Grid>\n            <Grid\n                item\n                container\n                direction='column'\n                justifyContent={'space-between'}\n                xs={3}\n                sx={{\n                    borderLeft: `0.1rem solid ${theme.palette.primary.main}`,\n                }}\n            >\n                <Stepper\n                    orientation='vertical'\n                    activeStep={activeSection}\n                    sx={{\n                        marginLeft: '0.5rem',\n                    }}\n                >\n                    {sections.map((section, index) => (\n                        <Step\n                            key={index}\n                            onClick={() => onSectionClick(section)}\n                        >\n                            <StyledStepLabel>\n                                {t(`general:${section}`)}\n                            </StyledStepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                <Button\n                    sx={{\n                        marginBottom: '0.5rem',\n                        marginLeft: '0.5rem',\n                        textAlign: 'right',\n                        justifyContent: 'flex-start',\n                        opacity: activeSection !== 0 ? 1 : 0,\n                    }}\n                    onClick={onExpand}\n                >\n                    {t(`general:${expanded ? 'collapse_all' : 'expand_all'}`)}\n                </Button>\n            </Grid>\n        </HomePageContainer>\n    );\n};\nHome.propTypes = {};\nexport default Home;\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n    // update size state when window resize\n    const [size, setSize] = useState([0, 0]);\n    function updateSize() {\n        setSize([window.innerWidth, window.innerHeight]);\n    }\n    useLayoutEffect(() => {\n        window.addEventListener('resize', updateSize);\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n    return size;\n}\n","import { RefObject } from \"react\";\n\nexport const getDisplayType = (\n    container: RefObject<HTMLDivElement>,\n    element: RefObject<HTMLDivElement>\n) => {\n    if(container.current && element.current) {\n        //if the container is smaller then the child, return block else flex\n        if (container.current.clientHeight < element.current.clientHeight) {\n            return 'block'\n        }\n    }\n    return 'flex'\n};\n","import React, {\n    memo,\n    useCallback,\n    useState,\n    MouseEvent,\n    useMemo,\n    useEffect,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RouteProps } from 'react-router-dom';\nimport {\n    workExperiences,\n    sections,\n    personalInfos,\n    educations,\n    skills,\n    languages,\n} from 'src/constants/resumeData';\nimport Home from '../components/Home';\n\nconst HomeContainer = (props: RouteProps) => {\n    const { t } = useTranslation(['general']);\n    const [resumeEntries, setResumeEntries] = useState( //resume data\n        workExperiences.map((exp) => ({\n            ...exp,\n            expanded: false,\n        }))\n    );\n    const [activeSection, setActiveSection] = useState(0);//state of right sidebar\n    const expanded = useMemo(\n        () => resumeEntries.filter((entry) => !entry.expanded).length === 0, //true if all resume entry shown expanded\n        [resumeEntries]\n    );\n\n    const onExpand = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (activeSection !== 0) {\n                setResumeEntries(\n                    resumeEntries.map((exp) => ({\n                        ...exp,\n                        expanded: !expanded,\n                    }))\n                );\n            }\n        },\n        [setResumeEntries, resumeEntries, expanded, activeSection]\n    );\n    const onTitleClick = useCallback(\n        (\n            e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>,\n            index: number\n        ) => {\n            if (activeSection !== 0) {\n                const newEntries = [...resumeEntries];\n                newEntries[index].expanded = !newEntries[index].expanded;\n                setResumeEntries(newEntries);\n            }\n        },\n        [setResumeEntries, resumeEntries, activeSection]\n    );\n    const onSectionClick = useCallback(\n        (newSection: string) => {\n            setActiveSection(\n                sections.findIndex((section) => section === newSection)\n            );\n        },\n        [setActiveSection]\n    );\n\n    useEffect(() => {\n        // expand corr. entries when active section changed\n        switch (activeSection) {\n            case 0:\n                setResumeEntries(\n                    personalInfos.map((personalInfo) => ({\n                        ...personalInfo,\n                        expanded: true,\n                    }))\n                );\n                break;\n            case 1:\n                setResumeEntries(\n                    workExperiences.map((exp) => ({\n                        ...exp,\n                        expanded: true,\n                    }))\n                );\n                break;\n            case 2:\n                setResumeEntries(\n                    educations.map((education) => ({\n                        ...education,\n                        expanded: true,\n                    }))\n                );\n                break;\n            case 3:\n                setResumeEntries(\n                    skills.map((skill) => ({\n                        ...skill,\n                        expanded: true,\n                    }))\n                );\n                break;\n            case 4:\n                setResumeEntries(\n                    languages.map((language) => ({\n                        ...language,\n                        expanded: true,\n                    }))\n                );\n                break;\n            default:\n                return setResumeEntries([]);\n        }\n    }, [activeSection, setResumeEntries]);\n    return (\n        <Home\n            resumeEntries={resumeEntries}\n            expanded={expanded}\n            activeSection={activeSection}\n            onExpand={onExpand}\n            t={t}\n            onTitleClick={onTitleClick}\n            onSectionClick={onSectionClick}\n        />\n    );\n};\nexport default memo(HomeContainer);\n","import {\n    List,\n    ListItemButton,\n    listItemButtonClasses,\n    ListItemIcon,\n    ListItemText,\n} from '@mui/material';\nimport { Location } from 'history';\nimport React, { MouseEvent, useMemo } from 'react';\nimport { TFunction } from 'react-i18next';\nimport { RouteKeyMap, Routes } from 'src/constants/route';\nimport { styled, useTheme } from '@mui/styles';\n\nconst StyledItemButton = styled(ListItemButton)(({ theme }) => ({\n    [`&.${listItemButtonClasses.selected}`]: {\n        backgroundColor: `${theme.palette.primary.light} !important`,\n        color: `${theme.palette.secondary.contrastText} !important`,\n        alignContent: 'center',\n        display: 'flex',\n    },\n}));\ninterface RouteItemProps {\n    onClick: (e: MouseEvent<HTMLDivElement>) => void;\n    selected: boolean;\n    name: string;\n    collapse: boolean;\n    icon: (props: { selected: boolean }) => JSX.Element;\n}\nconst RouteItem = ({\n    selected,\n    name,\n    collapse,\n    icon,\n    onClick,\n}: RouteItemProps) => {\n    return (\n        <StyledItemButton selected={selected} onClick={onClick}>\n            <ListItemIcon\n                sx={{\n                    width: 'fit-content',\n                    minWidth: 0,\n                }}\n            >\n                {icon({ selected })}\n            </ListItemIcon>\n            {!collapse && (\n                <ListItemText\n                    primary={name}\n                    sx={{\n                        margin: '0 0.5rem',\n                        marginTop: '0.2rem',\n                        color: 'text.primary'\n                    }}\n                />\n            )}\n        </StyledItemButton>\n    );\n};\ninterface SidebarProps {\n    location: Location;\n    history: any;\n    collapse: boolean;\n    t: TFunction<('general' | 'route')[], undefined>;\n}\nconst Sidebar = ({ location, history, collapse, t }: SidebarProps) => {\n    const theme = useTheme();\n    const routes = useMemo(\n        () =>\n            Object.values(Routes).map((route, index) => {\n                return (\n                    <RouteItem\n                        selected={location.pathname === RouteKeyMap[route].path}\n                        name={t<string>(`routes:${route}`)}\n                        onClick={(e) => {\n                            history.push(RouteKeyMap[route].path);\n                        }}\n                        key={`${route}-${index}`}\n                        icon={RouteKeyMap[route].icon}\n                        collapse={collapse}\n                    />\n                );\n            }),\n        [t, location, history, collapse]\n    );\n    return (\n        <List\n            component='nav'\n            aria-label='routes'\n            disablePadding\n            dense\n            sx={{\n                bgcolor: '#404040',\n                flexGrow: 1,\n                backgroundColor: 'background.default',\n                borderRight: `0.1rem solid ${theme.palette.primary.main}`\n            }}\n        >\n            {routes}\n        </List>\n    );\n};\nexport default Sidebar;\n","import { observer } from 'mobx-react';\nimport React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { UIContext } from 'src/store';\nimport UIStore from 'src/store/ui';\nimport Sidebar from '../components/Sidebar';\n\nconst SidebarContainer = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const { t } = useTranslation(['general', 'routes']);\n    const uiStore = useContext<UIStore>(UIContext);\n    return (\n        <Sidebar\n            location={location}\n            history={history}\n            t={t}\n            collapse={uiStore.sidebarCollapse}\n        />\n    );\n};\nexport default observer(SidebarContainer);\n","import { Switch, switchClasses } from '@mui/material';\nimport { styled } from '@mui/styles';\n\nexport default styled(Switch)(({ theme }) => ({\n    [`&.${switchClasses.root}`]: {\n        width: '4rem !important',\n    },\n    [`& .${switchClasses.switchBase}`]: {\n        height: '3rem',\n        paddingTop: '0 !important',\n    },\n}));\n","import { Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport default styled(Box)(({ theme }) => ({\n    width: '2rem',\n    height: '2rem',\n    borderRadius: '2rem',\n    background: '#ffffff',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n}));\n","import React, { ChangeEvent, useRef, MouseEvent } from 'react';\nimport {\n    AppBar,\n    Grid,\n    IconButton,\n    Stack,\n    Toolbar,\n    toolbarClasses,\n    Typography,\n} from '@mui/material';\nimport { styled } from '@mui/styles';\nimport { TFunction } from 'react-i18next';\nimport Brightness3Icon from '@mui/icons-material/Brightness3';\nimport WbSunnyIcon from '@mui/icons-material/WbSunny';\nimport Locale from '../constants/locale';\nimport ThemeEnum from '../constants/theme';\nimport RadioInput from './RadioInput';\nimport StyledSwitch from './StyledSwitch';\nimport CircleBox from './CircleBox';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\n\nconst StyledAppbar = styled(AppBar)(({ theme }) => {\n    return {\n        minHeight: theme.dimension.header,\n        height: theme.dimension.header,\n    };\n});\nconst StyledToolbar = styled(Toolbar)(({ theme }) => ({\n    [`&.${toolbarClasses.root}`]: {\n        minHeight: `${theme.dimension.header} !important`,\n        height: theme.dimension.header,\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingLeft: '0 !important',\n    },\n}));\nconst WhiteThemeIcon = styled(WbSunnyIcon)(({ theme }) => ({\n    color: theme.palette.secondary.main,\n}));\n\ninterface HeaderProps {\n    locale: Locale;\n    theme: ThemeEnum;\n    sidebarCollapse: boolean;\n    t: TFunction;\n    handleLocaleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleThemeChange: (e: ChangeEvent<HTMLInputElement>) => void;\n    handleCollapseBtnClick: (e: MouseEvent<HTMLButtonElement>) => void;\n}\nconst Header = ({\n    t,\n    locale,\n    theme,\n    sidebarCollapse,\n    handleLocaleChange,\n    handleThemeChange,\n    handleCollapseBtnClick,\n}: HeaderProps) => {\n    const themeSwitchRef = useRef<HTMLInputElement>(null);\n    return (\n        <StyledAppbar position='static'>\n            <StyledToolbar>\n                <IconButton\n                    onClick={handleCollapseBtnClick}\n                    sx={{\n                        paddingLeft: 0,\n                    }}\n                >\n                    <ExpandLessIcon\n                        sx={{\n                            transformOrigin: 'center',\n                            transform: sidebarCollapse\n                                ? 'rotate(90deg)'\n                                : 'rotate(-90deg)',\n                            color: 'text.primary',\n                            marginLeft: '1rem',\n                        }}\n                    />\n                </IconButton>\n                <Grid\n                    direction='row'\n                    container\n                    item\n                    xs={9}\n                    justifyContent={'flex-end'}\n                >\n                    <RadioInput<Locale>\n                        onChange={handleLocaleChange}\n                        title={t<string>('general:locale')}\n                        options={Object.values(Locale).map((option) => ({\n                            value: option,\n                            translation: t<string>(`general:${option}`),\n                        }))}\n                        value={locale}\n                    />\n                    <Stack direction={'row'} spacing={1} alignItems={'center'}>\n                        <Typography>\n                            {t<string>(`general:${ThemeEnum.White}`)}\n                        </Typography>\n                        <StyledSwitch\n                            onChange={handleThemeChange}\n                            checked={theme === ThemeEnum.Dark}\n                            color='secondary'\n                            inputRef={themeSwitchRef}\n                            checkedIcon={\n                                <CircleBox\n                                    onClick={(\n                                        e: MouseEvent<HTMLDivElement>\n                                    ) => {\n                                        if (themeSwitchRef.current) {\n                                            themeSwitchRef.current.click();\n                                        }\n                                    }}\n                                >\n                                    <Brightness3Icon />\n                                </CircleBox>\n                            }\n                            icon={\n                                <CircleBox\n                                    onClick={(\n                                        e: MouseEvent<HTMLDivElement>\n                                    ) => {\n                                        if (themeSwitchRef.current) {\n                                            themeSwitchRef.current.click();\n                                        }\n                                    }}\n                                >\n                                    <WhiteThemeIcon />\n                                </CircleBox>\n                            }\n                        />\n                        <Typography>\n                            {t<string>(`general:${ThemeEnum.Dark}`)}\n                        </Typography>\n                    </Stack>\n                </Grid>\n            </StyledToolbar>\n        </StyledAppbar>\n    );\n};\nexport default Header;\n","import { observer } from 'mobx-react';\nimport React, { ChangeEvent, useCallback, useContext, MouseEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Header from '../components/Header';\nimport Locale from '../constants/locale';\nimport LocalStorageKey from '../constants/localStorageKey';\nimport ThemeEnum from '../constants/theme';\nimport { UIContext } from '../store';\nimport UIStore from '../store/ui';\n\nconst HeaderContainer = () => {\n    const { t, i18n } = useTranslation(['general']);\n    const uiStore = useContext<UIStore>(UIContext);\n\n    const handleLocaleChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            //change and store the language in mobx store and localStorage\n            i18n.changeLanguage(e.target.value);\n            localStorage.setItem(LocalStorageKey.Locale, e.target.value);\n            uiStore.setLocale(e.target.value as Locale);\n        },\n        [i18n, uiStore]\n    );\n    const handleThemeChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => {\n            //change and store the theme in mobx store and localStorage\n            localStorage.setItem(\n                LocalStorageKey.Theme,\n                e.target.checked ? ThemeEnum.Dark : ThemeEnum.White\n            );\n            uiStore.setTheme(\n                e.target.checked ? ThemeEnum.Dark : ThemeEnum.White\n            );\n        },\n        [uiStore]\n    );\n    const handleCollapseBtnClick = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            uiStore.setSidebarCollapse(!uiStore.sidebarCollapse);\n        },\n        [uiStore]\n    );\n\n    return (\n        <Header\n            t={t}\n            locale={uiStore.locale}\n            theme={uiStore.theme}\n            sidebarCollapse={uiStore.sidebarCollapse}\n            handleLocaleChange={handleLocaleChange}\n            handleThemeChange={handleThemeChange}\n            handleCollapseBtnClick={handleCollapseBtnClick}\n        />\n    );\n};\nexport default observer(HeaderContainer);\n","import { Grid } from '@mui/material';\nimport { styled } from '@mui/styles';\nimport React, { FunctionComponent } from 'react';\nimport Sidebar from '../containers/Sidebar';\nimport Header from '../containers/Header';\nimport { renderRoutes, RouteConfigComponentProps } from 'react-router-config';\n\nconst Background = styled(Grid)(({ theme }) => ({\n    background: theme.palette.background.default,\n    color: theme.palette.text.primary,\n    minHeight: 'max(8rem, 100vh)',\n    minWidth: '37.5rem',\n}));\nconst BasicLayout: FunctionComponent<RouteConfigComponentProps<{}>> = ({\n    route,\n}: RouteConfigComponentProps<{}>) => {\n    return (\n        <Background container direction='column'>\n            <Header />\n            <Grid\n                direction='row'\n                container\n                justifyContent={'flex-start'}\n                flexGrow={1}\n                flexWrap={'nowrap'}\n                sx={{\n                    minHeight: 'max(8rem, 100vh - 3rem)',\n                }}\n            >\n                <Grid item container xs={'auto'}>\n                    <Sidebar />\n                </Grid>\n                <Grid item flexGrow={1}>\n                    {route && renderRoutes(route.routes)}\n                </Grid>\n            </Grid>\n        </Background>\n    );\n};\nexport default BasicLayout;\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createTheme, responsiveFontSizes } from '@mui/material';\nimport { ThemeProvider } from '@mui/styles';\nimport { ThemeProvider as SystemThemeProvider } from '@mui/material';\nimport UIStore from './store/ui';\nimport { observer } from 'mobx-react';\nimport Theme from './constants/theme';\nimport { DataContext, UIContext } from './store';\nimport DarkTheme from './themes/dark';\nimport WhiteTheme from './themes/white';\nimport { renderRoutes } from 'react-router-config';\nimport routeConfig from './constants/route';\nimport { useJsApiLoader } from '@react-google-maps/api';\nimport { googleMapApiKey } from './constants/environment';\nimport DataStore from './store/data';\n\nfunction App() {\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: googleMapApiKey,\n        libraries: ['places'],\n        preventGoogleFontsLoading: true,\n    });\n    const uiStore = useContext<UIStore>(UIContext);\n    const dataStore = useContext<DataStore>(DataContext);\n    const theme = useMemo(\n        () =>\n            responsiveFontSizes(\n                createTheme(\n                    uiStore.theme === Theme.Dark ? DarkTheme : WhiteTheme\n                )\n            ),\n        [uiStore.theme]\n    );\n    useEffect(() => {\n        //load the map client when script is fetched\n        if (isLoaded) {\n            dataStore.setMapClient();\n        }\n        return () => {\n            if (isLoaded) {\n                dataStore.setMapClient();\n            }\n        };\n    }, [isLoaded, dataStore]);\n    return (\n        <SystemThemeProvider theme={theme}>\n            {/* theme for sx props */}\n            <ThemeProvider theme={theme}>\n                {/* theme for styled component */}\n                <BrowserRouter>{renderRoutes(routeConfig)}</BrowserRouter>\n            </ThemeProvider>\n        </SystemThemeProvider>\n    );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Locale from '../constants/locale';\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: Locale.EN,\n        ns: ['general', 'demo', 'routes'],\n        defaultNS: 'general',\n        debug: true,\n        interpolation: {\n            escapeValue: false,\n        },\n        backend: {\n            loadPath: `${window.location.pathname}locales/{{lng}}/{{ns}}.json`,\n        },\n        supportedLngs: [Locale.EN, Locale.ZH],\n    });\nexport default i18n;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport UIStore from './store/ui';\nimport { DataContext, UIContext } from './store';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './utils/i18n';\nimport DataStore from './store/data';\n\nReactDOM.render(\n    <React.StrictMode>\n        <DataContext.Provider value={new DataStore()}>\n            <UIContext.Provider value={new UIStore()}>\n                <Suspense fallback='loading'>\n                    <I18nextProvider i18n={i18n}>\n                        <App />\n                    </I18nextProvider>\n                </Suspense>\n            </UIContext.Provider>\n        </DataContext.Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}